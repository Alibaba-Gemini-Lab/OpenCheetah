diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0039517..17ac79f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -223,7 +223,7 @@ if(SEAL_USE_INTEL_HEXL)
         message(STATUS "Intel HEXL: download ...")
         seal_fetch_thirdparty_content(ExternalIntelHEXL)
     else()
-        find_package(HEXL 1.2.3)
+        find_package(HEXL 1.2.2)
         if (NOT TARGET HEXL::hexl)
             message(FATAL_ERROR "Intel HEXL: not found")
         endif()
@@ -418,7 +418,7 @@ if(NOT BUILD_SHARED_LIBS)
             add_dependencies(seal HEXL::hexl)
             target_include_directories(seal PRIVATE
                 $<BUILD_INTERFACE:$<TARGET_PROPERTY:HEXL::hexl,INTERFACE_INCLUDE_DIRECTORIES>>)
-            target_compile_options(seal PRIVATE $<TARGET_PROPERTY:HEXL::hexl,INTERFACE_COMPILE_OPTIONS>)
+            #target_compile_options(seal PRIVATE $<TARGET_PROPERTY:HEXL::hexl,INTERFACE_COMPILE_OPTIONS>)
             get_target_property(HEXL_INTERFACE_LINK_OPTIONS HEXL::hexl INTERFACE_LINK_OPTIONS)
             if (NOT "${HEXL_INTERFACE_LINK_OPTIONS}" STREQUAL "HEXL_INTERFACE_LINK_OPTIONS-NOTFOUND")
                 target_link_libraries(seal INTERFACE ${HEXL_INTERFACE_LINK_OPTIONS})

diff --git a/native/src/seal/context.cpp b/native/src/seal/context.cpp
index c14b2b9..6cb9307 100644
--- a/native/src/seal/context.cpp
+++ b/native/src/seal/context.cpp
@@ -477,7 +477,8 @@ namespace seal
         // more than one modulus in coeff_modulus. This is equivalent to expanding
         // the chain by one step. Otherwise, we set first_parms_id_ to equal
         // key_parms_id_.
-        if (!context_data_map_.at(key_parms_id_)->qualifiers_.parameters_set() || parms.coeff_modulus().size() == 1)
+        if (!context_data_map_.at(key_parms_id_)->qualifiers_.parameters_set() || parms.coeff_modulus().size() == 1 ||
+            parms.n_special_primes() == 0)
         {
             first_parms_id_ = key_parms_id_;
         }

diff --git a/native/src/seal/encryptionparams.cpp b/native/src/seal/encryptionparams.cpp
index 923765b..a3bc308 100644
--- a/native/src/seal/encryptionparams.cpp
+++ b/native/src/seal/encryptionparams.cpp
@@ -23,9 +23,11 @@ namespace seal
             uint64_t poly_modulus_degree64 = static_cast<uint64_t>(poly_modulus_degree_);
             uint64_t coeff_modulus_size64 = static_cast<uint64_t>(coeff_modulus_.size());
             uint8_t scheme = static_cast<uint8_t>(scheme_);
+            uint64_t n_special_primes = static_cast<uint64_t>(n_special_primes_);
 
             stream.write(reinterpret_cast<const char *>(&scheme), sizeof(uint8_t));
             stream.write(reinterpret_cast<const char *>(&poly_modulus_degree64), sizeof(uint64_t));
+            stream.write(reinterpret_cast<const char *>(&n_special_primes), sizeof(uint64_t));
             stream.write(reinterpret_cast<const char *>(&coeff_modulus_size64), sizeof(uint64_t));
             for (const auto &mod : coeff_modulus_)
             {
@@ -128,6 +130,7 @@ namespace seal
         size_t total_uint64_count = add_safe(
             size_t(1), // scheme
             size_t(1), // poly_modulus_degree
+			size_t(1), // n_special_primes
             coeff_modulus_size, plain_modulus_.uint64_count());
 
         auto param_data(allocate_uint(total_uint64_count, pool_));
@@ -139,6 +142,8 @@ namespace seal
         // Write the poly_modulus_degree. Note that it will always be positive.
         *param_data_ptr++ = static_cast<uint64_t>(poly_modulus_degree_);
 
+        *param_data_ptr++ = static_cast<uint64_t>(n_special_primes_);
+
         for (const auto &mod : coeff_modulus_)
         {
             *param_data_ptr++ = mod.value();

diff --git a/native/src/seal/encryptionparams.h b/native/src/seal/encryptionparams.h
index 09bbdbf..908635e 100644
--- a/native/src/seal/encryptionparams.h
+++ b/native/src/seal/encryptionparams.h
@@ -205,6 +205,16 @@ namespace seal
             compute_parms_id();
         }
 
+        inline void set_n_special_primes(int n)
+        {
+            // Check that a scheme is set
+            if (n != 0 && n != 1)
+            {
+                throw std::logic_error("set_n_special_primes: n is not supported");
+            }
+
+            n_special_primes_ = static_cast<size_t>(n);
+        }
         /**
         Sets the plaintext modulus parameter. The plaintext modulus is an integer
         modulus represented by the Modulus class. The plaintext modulus
@@ -305,6 +315,14 @@ namespace seal
             return random_generator_;
         }
 
+        /**
+        Returns the number of special primes.
+        */
+        SEAL_NODISCARD inline size_t n_special_primes() const noexcept
+        {
+            return n_special_primes_;
+        }
+
         /**
         Compares a given set of encryption parameters to the current set of
         encryption parameters. The comparison is performed by comparing the
@@ -490,6 +508,8 @@ namespace seal
 
         scheme_type scheme_;
 
+        std::size_t n_special_primes_ = 1;
+
         std::size_t poly_modulus_degree_ = 0;
 
         std::vector<Modulus> coeff_modulus_{};
